version: 2.1

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            cd backend
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws s3 rm s3://udapeople-s3bucket-${CIRCLE_WORKFLOW_ID}/ --recursive
           
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
             
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            npm update
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Run frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan 

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [scan-backend]
      - run:
           name: Run scan-backend
           command: |
                 cd backend
                 npm install
                 npm audit fix --audit-level=critical --force
      - save_cache:
           paths: [backend/node_modules]
           key: scan-backend

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            yum install -y tar gzip
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
                SHIV_IP=$(aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:project,Values=udapeople" \
                  --output text)
                
                 echo "http://$SHIV_IP:3030" > .circleci/outputs/link.txt 
                 echo "[all]" > .circleci/ansible/inventory.txt
                 echo "$SHIV_IP" > .circleci/ansible/inventory.txt
                 
                 cat .circleci/ansible/inventory.txt
         # no_output_timeout: 5m      
             
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/link.txt
            - project/.circleci/ansible/inventory.txt
            
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
                fingerprints: ["df:f6:c5:63:33:64:a4:be:02:f7:c5:22:b9:7a:e2:e3"]
      - attach_workspace:
                at: ~/
      - run:
          name: Install dependencies
          command: |
                       apk add --no-cache \
                       python3 \
                       py3-pip \
                       && pip3 install --upgrade pip \
                       && pip3 install \
                       awscli \
                       && rm -rf /var/cache/apk/*
                       apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
                    ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [backend-build]           
      - run:
          name: Run migrations
          command : | 
            cd backend
            npm install
            npm run migrations
  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      - run:
            name: Install dependencies
            command: |
              sudo apt-get -y -qq update
              sudo apt-get -qq install awscli
      - attach_workspace:
            at: .    
      - run:
            # MUST be http not https
            name: Get backend url
            command: |
             export SHIVS_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text)
              echo $SHIVS_IP
              export API_URL="http://$SHIVS_IP:3030"
              echo API_URL=${API_URL}
              cd frontend
              npm install
              npm run build     
        
      - run:
            name: Deploy frontend objects
            command: |
              cd frontend
              s3Buck=$(echo "udapeople-${CIRCLE_WORKFLOW_ID:0:7}")
              aws s3 sync dist s3://$s3Buck/
              URL02=("http://$s3Buck.s3-website-eu-east-1.amazonaws.com")

      - persist_to_workspace:
            root: .
            paths:
              - frontend/dist
      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
      
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
  
    steps:
      - checkout
      - run:
          name: Install depend
          command: |
            apk add tar gzip
            apk update pip3
            pip3 install awscli
            apk add --update curl
            apk add --update nodejs npm
            apk add --update ansible
      - add_ssh_keys:
                  fingerprints: ["df:f6:c5:63:33:64:a4:be:02:f7:c5:22:b9:7a:e2:e3"]
      - attach_workspace:
          at: ~/              
      
      - run:
          name: Get ip and deploy back end 
          command: |
            SHIV_IP=$(aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:project,Values=udapeople" \
                  --output text)
                 echo "$SHIV_IP"
                 echo "[web]" > .circleci/ansible/inventory.txt
                 echo $SHIV_IP >> .circleci/ansible/inventory.txt
                 cat .circleci/ansible/inventory.txt
                 
            printenv >> ./backend/.env
            tar -C backend -czvf artifact.tar.gz .
            echo "Contents  of the inventory.txt file is -------"
            cat .circleci/ansible/inventory.txt
            cd .circleci/ansible/
            ansible-playbook -i inventory.txt deploy-backend.yml
  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
              branches:
                only:
                  - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]    
      - deploy-frontend:
         requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]