version: 2.1

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Delete s3 bucket
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            exit 0

  undo_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd backend
            if [[ -f "~/project/.circleci/outputs/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi 

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [v1-frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            npm update
      - save_cache:
          paths: [frontend/node_modules]
          key: v1-frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [v1-backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: v1-backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [v1-frontend-test]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: v1-frontend-test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [v1-backend-test]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: v1-backend-test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [v1-frontend-scan]
      - run:
          name: Run frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: v1-frontend-scan 

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [v1-scan-backend]
      - run:
           name: Run scan-backend
           command: |
                 cd backend
                 npm install
                 npm audit fix --audit-level=critical --force
                 npm audit --audit-level=critical
      - save_cache:
           paths: [backend/node_modules]
           key: v1-scan-backend

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install needed utilities and check backend exist 
          command: |
            yum install -y tar gzip
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Now Add back-end ip to ansible inventory file
          command: |
                SHIV_IP=$(aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:project,Values=udapeople" \
                  --output text)
                
                echo "http://$SHIV_IP:3030" > .circleci/outputs/link.txt 
                echo "[web]" > .circleci/ansible/inventory.txt
                echo "$SHIV_IP" > .circleci/ansible/inventory.txt
                
                cat .circleci/ansible/inventory.txt
                cat .circleci/outputs/link.txt
         # no_output_timeout: 5m      
             
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/link.txt
            - project/.circleci/ansible/inventory.txt
            
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
                fingerprints: ["df:f6:c5:63:33:64:a4:be:02:f7:c5:22:b9:7a:e2:e3"]
      - attach_workspace:
                at: ~/
      #- restore_cache:
      #      keys: ['backend-build']
      - run:
          name: Install dependencies
          command: |
                    apk add --no-cache \
                    python3 \
                    py3-pip \
                    && pip3 install --upgrade pip \
                    && pip3 install \
                    awscli \
                    && rm -rf /var/cache/apk/*
                    apk add --update ansible
      - run:
          name: Please start Configure server
          command: |
                cd .circleci/ansible
                ansible-playbook -i inventory.txt configure-server.yml
      - run:
              name: Configure node exporter for premethius
              command: |
                    cd .circleci/ansible
                    ansible-playbook -i inventory.txt nodex.yml
                    
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      
      - restore_cache:
            keys: [v1-backend-build]   
      
      - run:
            name: enviroments variable to backend
            command: |
              cd  backend
              touch .env
              echo ENVIROMENT=production > .env
              echo NODE_ENV=production >> ".env"
              echo TYPEORM_CONNECTION=postgres >> .env
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.js >> .env
              echo TYPEORM_MIGRATIONS=./src/migrations/*.js >> .env
              echo TYPEORM_HOST=$TYPEORM_HOST >> .env
              echo TYPEORM_PORT=$TYPEORM_PORT >> .env
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
              ls -latr
              cat .env

      - run:
          name: Run migrations
          command : |
            # Your code here
            cd backend
            npm install
            npm run migrations >> migrations_dump.txt

            cat migrations_dump.txt
          no_output_timeout: 30m 

      - run:
          name: Store migration result in a file.
          command: |
            cd backend
            if grep -q "has been executed successfully." migrations_dump.txt
            then
              ~/project/outputs/migration_output.txt
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/migration_output.txt
     
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0

    steps:
      - checkout
      - restore_cache:
          keys: [v1-frontend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Install AWS CLI dependenciess
          working_directory: /tmp
          command: |
            sudo apt-get update
            sudo apt install curl -y 
            sudo apt install unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            /usr/local/bin/aws --version
      - run:
          name: Install required dependencies tar
          command: sudo apt-get install -y tar gzip
      - run:
          name: Install required npm
          command: |
            pwd
            cd frontend
            pwd
            ls -ltr
            npm install
      - run: 
            name: Get backend url
            command: |
             export SHIVP_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text)
             export API_URL="http://${SHIVP_IP}:3030"
             echo "${API_URL}"
             echo "${API_URL}" >> frontend/.env
             cat frontend/.env
        
      - run:
            name: Deploy frontend objects
            command: |
              cd frontend
              export API_URL=$(cat .env)
              echo "back end API_URL from .env is ${API_URL}"
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
    
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - undo_migrations

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add tar gzip
            apk update pip3
            pip3 install awscli
            apk add --update curl
            apk add --update nodejs npm
            apk add --update ansible
            
      # Add ssh keys with fingerprint
      - add_ssh_keys:
            fingerprints: ["df:f6:c5:63:33:64:a4:be:02:f7:c5:22:b9:7a:e2:e3"] 
      # attach workspace
      - attach_workspace:
            at: ~/
      #- restore_cache:
      #      keys: ['backend-build']
            
      - run:
          name: Get IP and Deploy backend
          command: |
            ls -la
            [[ ! -d backend ]] && mkdir backend
            myvar="backend/.env"
            echo ENVIROMENT=production > $myvar
            echo NODE_ENV=production >> $myvar
            echo TYPEORM_CONNECTION=postgres >> $myvar
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> $myvar
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.js >> $myvar
            echo TYPEORM_MIGRATIONS=./src/migrations/*.js >> $myvar
            echo TYPEORM_HOST=$TYPEORM_HOST >> $myvar
            echo TYPEORM_PORT=$TYPEORM_PORT >> $myvar
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> $myvar
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> $myvar
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> $myvar
            cat $myvar
          
            tar -C backend -czvf artifact.tar.gz .
            ls -la
            
            SHIV_IP=$(aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:project,Values=udapeople" \
                  --output text)
                 echo "$SHIV_IP"
                 echo "[web]" > .circleci/ansible/inventory.txt
                 echo $SHIV_IP >> .circleci/ansible/inventory.txt
                 cat .circleci/ansible/inventory.txt
                 
            printenv >> ./backend/.env
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo " the inventory.txt data is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations

  smoke-test-backend:
    docker:
      #- image: python:3.9.0-alpine
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
            apk add --update tar gzip curl
      - run:
          name: Test backend app.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                            --filters "Name=tag:project,Values=udapeople" \
                            --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
            echo ${BACKEND_IP}
            export API_URL="http://$BACKEND_IP:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              echo "Backend alive, Proceeding" 
            else
              return 1
            fi
            
      #- destroy-environment:
      #    workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      #- undo_migrations      

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Package frontend app after smoke test
          command: |
            URL04="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL04}
            if curl -s ${URL04} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi

      - destroy-environment:    
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
     # Checkout code from git
      - checkout
      - run:
          name: Install needed os utilities
          command: 
            yum install -y tar gzip curl
      - attach_workspace:
          at: ~/
      - run:
          name: dependencies for destroy
          command: |
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs      
            npm --version
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci
          command: |
            export oldworkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo ${oldworkflowID} >> ~/project/oldworkflowID.txt
                     
            aws cloudformation deploy --template-file files/cloudfront.yml --tags project=udapeople --stack-name InitialStack --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" 
            echo "oldworkflowID is ${oldworkflowID}"
            echo "current workflow ID is udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: ~/
          paths:
            - project/oldworkflowID.txt      

      - destroy-environment:    
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - undo_migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install needed os utilities
          command: yum install -y tar gzip curl
      - attach_workspace:
          at: ~/
      - run:
          name: dependencies for destroy
          command: |
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs      
            npm --version
      - run:
          name: Remove old stacks 
          working_directory: ./.circleci
          command: |
            export oldworkflowID=$(<~/project/oldworkflowID.txt)
            echo "oldworkflowID is ${oldworkflowID}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            
            echo "Stack names ${STACKS[@]}"  
            if [[ "${STACKS[@]}" =~ "${oldWorkflowID}" ]]
            then
              echo "deleting old versions"       
              aws s3 rm "s3://udapeople-${oldworkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${oldworkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${oldworkflowID}"
            else
              echo "Nothing to clean up"
            fi 

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
              branches:
                only:
                  - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]    
      - deploy-frontend:
         requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test-backend:
          requires: [deploy-backend]
      - smoke-test:
          requires: [deploy-frontend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]    
